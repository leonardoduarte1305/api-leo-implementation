<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>dev.leoduarte.api.leo.implementation</groupId>
	<artifactId>api-leo-parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>${project.description}</name>
	<description>api-leo Implementation</description>
	<licenses>
		<license>
			<name>dev.leoduarte Software License 1.0</name>
		</license>
	</licenses>

	<modules>
		<module>app</module>
		<module>app-test</module>
		<module>app-test-support</module>
	</modules>

	<scm>
		<connection>scm:git:https://github.com/leonardoduarte1305/api-leo.git</connection>
		<developerConnection>scm:git:git@github.com:leonardoduarte1305/api-leo.git</developerConnection>
		<url>https://github.com/leonardoduarte1305/api-leo.git</url>
		<tag>@{project.version</tag>
	</scm>

	<properties>
		<java.version>11</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.source>UTF-8</project.reporting.source>

		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<org.codehaus.mojo.tidy.version>1.1.0</org.codehaus.mojo.tidy.version>

		<org.springframework.boot.version>2.7.0</org.springframework.boot.version>
		<jacoco.maven.plugin.version>0.8.8</jacoco.maven.plugin.version>
		<org.mapstruct.version>1.5.2.Final</org.mapstruct.version>
		<org.projectlombok.version>1.18.24</org.projectlombok.version>
		<validation.api.version>2.0.1.Final</validation.api.version>
		<flyway-core.version>9.2.0</flyway-core.version>

		<skipITs>false</skipITs>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>dev.leoduarte.api.leo.spec</groupId>
				<artifactId>server</artifactId>
				<version>1.0-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>dev.leoduarte.api.leo.spec</groupId>
				<artifactId>client</artifactId>
				<version>1.0-SNAPSHOT</version>
			</dependency>

			<!-- Springfraework Dependencies-->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${org.springframework.boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
				<version>${org.springframework.boot.version}</version>
				<scope>runtime</scope>
				<optional>true</optional>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-configuration-processor</artifactId>
				<version>${org.springframework.boot.version}</version>
				<optional>true</optional>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-jdbc</artifactId>
				<version>${org.springframework.boot.version}</version>
			</dependency>

			<!-- Test Dependencies -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${org.springframework.boot.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- Third party Dependencies -->
			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
			</dependency>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<optional>true</optional>
			</dependency>
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${mapstruct.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.validation</groupId>
				<artifactId>validation-api</artifactId>
				<version>${validation.api.version}</version>
			</dependency>
			<dependency>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-core</artifactId>
				<version>${flyway-core.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${version.org.springframework.boot}</version>
					<executions>
						<execution>
							<goals>
								<goal>build-info</goal>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
						<annotationProcessorPaths>
							<path>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${org.projectlombok.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${org.mapstruct.version}</version>
							</path>
						</annotationProcessorPaths>
						<compilerArgs>
							<arg>-Amapstruct.defaultComponentModel=spring</arg>
							<arg>-Amapstruct.unmappedTargetPolicy=ERROR</arg>
						</compilerArgs>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<!-- This a temporary workaround to deal with https://stackoverflow.com/questions/53010200/maven-surefire-could-not-find-forkedbooter-class -->
						<useSystemClassLoader>false</useSystemClassLoader>

						<systemPropertyVariables>
							<project.version>${project.version}</project.version>
						</systemPropertyVariables>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<executions>
						<execution>
							<id>integration-tests</id>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<skipTests>${skipITs}</skipTests>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.maven.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>3.7.0.1746</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>development</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<modules>
				<module>app</module>
			</modules>
		</profile>

		<profile>
			<id>ci</id>
			<modules>
				<module>app</module>
			</modules>
		</profile>

		<profile>
			<id>sonarQubeCoverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>report</id>
								<goals>
									<!--
		In order to make the code coverage available in SonarQube, Jacoco needs to generate a xml based
		report, which is done by simply calling the goal 'report'. For more info read:
		https://community.sonarsource.com/t/coverage-test-data-importing-jacoco-coverage-report-in-xml-format/12151
									-->
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>